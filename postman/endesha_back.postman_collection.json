{
	"info": {
		"_postman_id": "b6c35bcf-f5a1-4192-91d3-9801d2906e09",
		"name": "endesha_back",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":\"scneba@gmail.com\",\r\n\"password\":\"clasence\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/auth/login",
					"host": [
						"{{domain}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "add permission success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"verb\":\"POST\",\r\n    \"path\":\"/api/{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/permissions",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"permissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "add permission failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(1);\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eq(\"PERMISSION_EXIST\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"verb\":\"POST\",\r\n    \"path\":\"/pages\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/permissions",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"permissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "add role success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.data.permissions).to.have.length(2);\r",
							"     pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomPassword}}_postman_role\",\r\n    \"description\":\"random test from postman\",\r\n    \"permissions\":[\"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd1bed\",\"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd2bed\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/roles",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "add role failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(3);\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eq(\"ROLE_NAME_EXIST\");\r",
							"    pm.expect(jsonData.errors[1].err_code).to.be.eq(\"PERMISSION_NOT_FOUND\");\r",
							"    pm.expect(jsonData.errors[2].err_code).to.be.eq(\"INVALID_UUID\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"admin\",\r\n    \"description\":\"random test from postman\",\r\n    \"permissions\":[\"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd1bee\",\"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd2bedf\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/roles",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "add user success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.data.roles).to.have.length(2);\r",
							"     pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomPassword}}_{{$randomFullName}}\",\r\n\"email\":\"{{$randomPassword}}@gmail.com\",\r\n\"username\":\"{{$randomPassword}}\",\r\n\"password\":\"abceooesee\",\r\n\"roles\":[\"2d7bb01e-9159-4ff5-ab5e-464345b704a4\",\"2d7bb01e-9159-4ff5-ab5e-464345b704a5\"]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/users",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add user failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(4);\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eq(\"EMAIL_EXISTS\");\r",
							"    pm.expect(jsonData.errors[1].err_code).to.be.eq(\"USER_NAME_EXISTS\");\r",
							"    pm.expect(jsonData.errors[2].err_code).to.be.eq(\"ROLE_NOT_EXIST\");\r",
							"    pm.expect(jsonData.errors[3].err_code).to.be.eq(\"INVALID_UUID\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"neba\",\r\n    \"email\":\"neba@gmail.com\",\r\n    \"username\":\"neba\",\r\n    \"password\":\"abceooesee\",\r\n    \"roles\":[\"2d7bb01e-9159-4ff5-ab5e-464345b704a1\",\"2d7bb01e-9159-4ff5-ab5e-464345b704a55\"]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/users",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.data.roles).to.have.length.greaterThan(1);\r",
							"     pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"f0784b55-3c34-4fb9-b1ff-5d679485b491\",\r\n    \"roles\":[\"171e397f-c4cb-498d-a36b-10192fe6d050\", \"2d7bb01e-9159-4ff5-ab5e-464345b704a4\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/users",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user success failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(1);\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eq(\"USER_NOT-EXIST\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"f0784b55-3c34-4fb9-b1ff-5d679485b498\",\r\n    \"roles\":[\"171e397f-c4cb-498d-a36b-10192fe6d050\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/users",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.data.permissions).to.have.length(2);\r",
							"     pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"2d7bb01e-9159-4ff5-ab5e-464345b704a5\",\r\n    \"permissions\":[\"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd1bed\",\"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd2bed\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/roles",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role success failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(2);\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eq(\"PERMISSION_NOT_FOUND\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"2d7bb01e-9159-4ff5-ab5e-464345b704a5\",\r\n    \"permissions\":[\"fe88a783-28cc-4837-ac23-5a295256e59e\",\"83ff6a4f-c8ae-4106-8aee-7645e7d722fd\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/roles",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get role success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.data.name).to.be.eq(\"admin\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/roles?name=admin",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"roles"
					],
					"query": [
						{
							"key": "name",
							"value": "admin"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get permission success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/permissions?verb=post",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"permissions"
					],
					"query": [
						{
							"key": "verb",
							"value": "post"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.data.username).to.be.eq(\"clasence\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/users?username=clasence",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "username",
							"value": "clasence"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "put role success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"     pm.expect(jsonData.data.permissions).to.have.length(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"2d7bb01e-9159-4ff5-ab5e-464345b704a5\",\r\n    \"permissions\":[\"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd1bed\",\"1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd2bed\"],\r\n    \"name\":\"CSS3\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/roles",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "put role success failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(1);\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eq(\"ROLE_NAME_REQUIRED\");\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"2d7bb01e-9159-4ff5-ab5e-464345b704a5\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/roles",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put user success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.data.roles).to.have.length(3);\r",
							"     pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n    \"id\": \"f0784b55-3c34-4fb9-b1ff-5d679485b491\",\r\n            \"name\": \"Random update\",\r\n            \"email\": \"random@gmail.com\",\r\n            \"username\": \"random\",\r\n    \"roles\":[\"171e397f-c4cb-498d-a36b-10192fe6d050\",\"2d7bb01e-9159-4ff5-ab5e-464345b704a4\", \"2d7bb01e-9159-4ff5-ab5e-464345b704a5\"]\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/users",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put user failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(3);\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eq(\"NAME_REQUIRED\");\r",
							"    pm.expect(jsonData.errors[1].err_code).to.be.eq(\"EMAIL_REQUIRED\");\r",
							"    pm.expect(jsonData.errors[2].err_code).to.be.eq(\"USERNAME_REQUIRED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n    \"id\": \"f0784b55-3c34-4fb9-b1ff-5d679485b491\"\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/users",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete role success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"427e38f9-1d09-4494-bf4c-302f46620314\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/roles",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"629950d6-e8d1-4d45-ae96-16560ba2b5be\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/users",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete permission success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"ad51613a-b01e-4052-bdbe-a6831fbaf1da\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/permissions",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"permissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "add category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomPassword}}\",\r\n    \"description\":\"Random Category generated from Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/categories",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/categories",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "update category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n     \"id\":\"06615861-1659-47db-89fa-b81732a6576a\",\r\n    \"name\":\"{{$randomPassword}}duplicate\",\r\n    \"description\":\"Random Category generated from Postman duplicate\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/categories",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n     \"id\":\"06615861-1659-47db-89fa-b81732a6573a\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/categories",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "add user answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"09615861-1659-47db-89fa-b81732a6577a\",\r\n    \"answer\":\"New answer new.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/useranswers",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"useranswers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"08615861-1659-47db-89fa-b81732a6576a\",\r\n    \"answer\":\"Must turn left ahead,  example joining a one way traffic road. updated\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/useranswers",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"useranswers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User Answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"05615861-1659-47db-89fa-b81732a6578a\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/useranswers",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"useranswers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User answers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\":\"adbc\",\r\n    \"question_id\":\"cde\",\r\n    \"answer\":\"Must turn left ahead,  example joining a one way traffic road.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/useranswers",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"useranswers"
					]
				}
			},
			"response": []
		},
		{
			"name": "add Answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"short_description\":\"compulsory turn Left Sign {{$randomPassword}}\",\r\n    \"answer\":\"Must turn left ahead,  example joining a one way traffic road.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/answers",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"answers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"08615861-1659-47db-89fa-b81732a6576a\",\r\n    \"short_description\":\"compulsory turn Left Sign new{{$randomPassword}}\",\r\n    \"answer\":\"Must turn left ahead,  example joining a one way traffic road new.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/answers",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"answers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"05615861-1659-47db-89fa-b81732a6574a\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/answers",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"answers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"c88b1023-7cc0-4bb7-993b-0275f921a9c4\",\r\n    \"short_description\":\"compulsory turn Left Sign new{{$randomPassword}}\",\r\n    \"answer\":\"Must turn left ahead,  example joining a one way traffic road new.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/answers",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"answers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Question",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"07715861-1659-47db-89fa-b81732a6575a\",\r\n    \"category_id\":\"06615861-1659-47db-89fa-b81732a6576a\",\r\n    \"answer_id\":\"07615861-1659-47db-89fa-b81732a6575a\",\r\n    \"question\":\"Where does the law not allow you to stop in Kenya + {{$randomPassword}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/questions",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"questions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update question",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data.id).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"07715861-1659-47db-89fa-b81732a6575a\",\r\n    \"category_id\":\"06615861-1659-47db-89fa-b81732a6576a\",\r\n    \"answer_id\":\"07615861-1659-47db-89fa-b81732a6575a\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/questions",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"questions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Questions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/questions",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"questions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Question",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"3eb4ed5a-8e2a-44e5-b40f-a7f43d73dc04\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/questions",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"questions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Image failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eql(\"IMAGE_REQUIRED\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "test_image3",
							"type": "text"
						},
						{
							"key": "image",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{domain}}/endesha/images",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update image failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status test\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors[0].err_code).to.be.eql(\"IMAGE_REQUIRED\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "test_image3",
							"type": "text"
						},
						{
							"key": "image",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{domain}}/endesha/images",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.data).to.have.length.greaterThan(5);\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"05615861-1659-47db-89fa-b81732a6574a\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/endesha/images",
					"host": [
						"{{domain}}"
					],
					"path": [
						"endesha",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Right body returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors).to.have.length(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/auth/logout",
					"host": [
						"{{domain}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}